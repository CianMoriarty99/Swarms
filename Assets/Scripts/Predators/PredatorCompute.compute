#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Predator {
    float3 position;
    float3 direction;

    float3 SwarmDirection;
    float3 SwarmCentre;
    float3 avoidanceDirection;
    int numSwarm;
};

RWStructuredBuffer<Predator> predators;
int numPredators;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int indexB = 0; indexB < numPredators; indexB ++) {
        if (id.x != indexB) {
            Predator predatorB = predators[indexB];
            float3 offset = predatorB.position - predators[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            if (sqrDst < viewRadius * viewRadius) {
                predators[id.x].numSwarm += 1;
                predators[id.x].SwarmDirection += predatorB.direction;
                predators[id.x].SwarmCentre += predatorB.position;

                if (sqrDst < avoidRadius * avoidRadius) {
                    predators[id.x].avoidanceDirection -= offset / sqrDst;
                }
            }
        }
    }
}